/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccessKey } from "./AccessKey";
import { AccessKeyCountArgs } from "./AccessKeyCountArgs";
import { AccessKeyFindManyArgs } from "./AccessKeyFindManyArgs";
import { AccessKeyFindUniqueArgs } from "./AccessKeyFindUniqueArgs";
import { CreateAccessKeyArgs } from "./CreateAccessKeyArgs";
import { UpdateAccessKeyArgs } from "./UpdateAccessKeyArgs";
import { DeleteAccessKeyArgs } from "./DeleteAccessKeyArgs";
import { AccessLogFindManyArgs } from "../../accessLog/base/AccessLogFindManyArgs";
import { AccessLog } from "../../accessLog/base/AccessLog";
import { School } from "../../school/base/School";
import { AccessKeyService } from "../accessKey.service";
@graphql.Resolver(() => AccessKey)
export class AccessKeyResolverBase {
  constructor(protected readonly service: AccessKeyService) {}

  async _accessKeysMeta(
    @graphql.Args() args: AccessKeyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccessKey])
  async accessKeys(
    @graphql.Args() args: AccessKeyFindManyArgs
  ): Promise<AccessKey[]> {
    return this.service.accessKeys(args);
  }

  @graphql.Query(() => AccessKey, { nullable: true })
  async accessKey(
    @graphql.Args() args: AccessKeyFindUniqueArgs
  ): Promise<AccessKey | null> {
    const result = await this.service.accessKey(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccessKey)
  async createAccessKey(
    @graphql.Args() args: CreateAccessKeyArgs
  ): Promise<AccessKey> {
    return await this.service.createAccessKey({
      ...args,
      data: {
        ...args.data,

        school: args.data.school
          ? {
              connect: args.data.school,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AccessKey)
  async updateAccessKey(
    @graphql.Args() args: UpdateAccessKeyArgs
  ): Promise<AccessKey | null> {
    try {
      return await this.service.updateAccessKey({
        ...args,
        data: {
          ...args.data,

          school: args.data.school
            ? {
                connect: args.data.school,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccessKey)
  async deleteAccessKey(
    @graphql.Args() args: DeleteAccessKeyArgs
  ): Promise<AccessKey | null> {
    try {
      return await this.service.deleteAccessKey(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AccessLog], { name: "accessLogs" })
  async findAccessLogs(
    @graphql.Parent() parent: AccessKey,
    @graphql.Args() args: AccessLogFindManyArgs
  ): Promise<AccessLog[]> {
    const results = await this.service.findAccessLogs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => School, {
    nullable: true,
    name: "school",
  })
  async getSchool(@graphql.Parent() parent: AccessKey): Promise<School | null> {
    const result = await this.service.getSchool(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
