/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AccessKey as PrismaAccessKey,
  AccessLog as PrismaAccessLog,
  School as PrismaSchool,
} from "@prisma/client";

export class AccessKeyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessKeyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessKey.count(args);
  }

  async accessKeys<T extends Prisma.AccessKeyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessKeyFindManyArgs>
  ): Promise<PrismaAccessKey[]> {
    return this.prisma.accessKey.findMany<Prisma.AccessKeyFindManyArgs>(args);
  }
  async accessKey<T extends Prisma.AccessKeyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessKeyFindUniqueArgs>
  ): Promise<PrismaAccessKey | null> {
    return this.prisma.accessKey.findUnique(args);
  }
  async createAccessKey<T extends Prisma.AccessKeyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessKeyCreateArgs>
  ): Promise<PrismaAccessKey> {
    return this.prisma.accessKey.create<T>(args);
  }
  async updateAccessKey<T extends Prisma.AccessKeyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessKeyUpdateArgs>
  ): Promise<PrismaAccessKey> {
    return this.prisma.accessKey.update<T>(args);
  }
  async deleteAccessKey<T extends Prisma.AccessKeyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessKeyDeleteArgs>
  ): Promise<PrismaAccessKey> {
    return this.prisma.accessKey.delete(args);
  }

  async findAccessLogs(
    parentId: string,
    args: Prisma.AccessLogFindManyArgs
  ): Promise<PrismaAccessLog[]> {
    return this.prisma.accessKey
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accessLogs(args);
  }

  async getSchool(parentId: string): Promise<PrismaSchool | null> {
    return this.prisma.accessKey
      .findUnique({
        where: { id: parentId },
      })
      .school();
  }
}
