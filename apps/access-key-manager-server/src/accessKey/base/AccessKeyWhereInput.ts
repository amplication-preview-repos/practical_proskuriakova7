/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccessLogListRelationFilter } from "../../accessLog/base/AccessLogListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { SchoolWhereUniqueInput } from "../../school/base/SchoolWhereUniqueInput";
import { EnumAccessKeyStatus } from "./EnumAccessKeyStatus";

@InputType()
class AccessKeyWhereInput {
  @ApiProperty({
    required: false,
    type: () => AccessLogListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccessLogListRelationFilter)
  @IsOptional()
  @Field(() => AccessLogListRelationFilter, {
    nullable: true,
  })
  accessLogs?: AccessLogListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  expiryDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  procurementDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => SchoolWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SchoolWhereUniqueInput)
  @IsOptional()
  @Field(() => SchoolWhereUniqueInput, {
    nullable: true,
  })
  school?: SchoolWhereUniqueInput;

  @ApiProperty({
    required: false,
    enum: EnumAccessKeyStatus,
  })
  @IsEnum(EnumAccessKeyStatus)
  @IsOptional()
  @Field(() => EnumAccessKeyStatus, {
    nullable: true,
  })
  status?: "Option1";
}

export { AccessKeyWhereInput as AccessKeyWhereInput };
